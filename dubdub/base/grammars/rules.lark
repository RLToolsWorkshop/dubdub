?start: (declaration | _NL) *


?declaration: class_dec
            | func_dec 
            | var_dec
            | statement

// Declarations
// Deciding to put declarations all into one place to prevent confusion.

var_dec: "var" IDENTIFIER ("=" expr)? ";" 
func_dec: "fun" function ";"?
class_dec: "class" IDENTIFIER ( "<" IDENTIFIER )? LBRACE function* RBRACE


?statement: end_comma_stmt
    | for_statement
    | if_statement
    | while_statement
    | block

?end_comma_stmt: ( simple_statement | print_statement | return_stmt )

// Notice for statements we add a ";" at the end. Because of the recursive na
?simple_statement:  expr ";"
?expr: assignment
return_stmt: "return" expr? ";"
print_statement: "print" expr ";"
if_statement: IF  LPAR expr RPAR statement (ELSE statement)? 
while_statement : WHILE LPAR expr RPAR statement
for_statement : FOR "(" (var_dec | simple_statement  | ";") expr? ";" expr? ")" statement
call_stmt: call ";" 

?block: "{" declaration* "}"



// Assignment operators 

assignment: ( call "." )? IDENTIFIER "=" assignment
    | logic_or


// Primative operators

// Terms and Factors

?complex_expr: product
    | complex_expr "+" product   -> add
    | complex_expr "-" product   -> sub

?product: call
    | product "*" call  -> mul
    | product "/" call  -> div

?logic_or: (logic_and) ("or" logic_and)* 
?logic_and: logic_not ("and" logic_not)*
?logic_not: ("not"| "!") logic_not -> not 
         | comparison 
?comparison: complex_expr (_comp_op complex_expr)*


call: atom (LPAR arguments? RPAR | "." IDENTIFIER)*
    
?atom: primary
     | prwrap{expr}

arguments: expr ("," expr )*

function       : IDENTIFIER LPAR parameters? RPAR block 





%ignore WS_INLINE
%ignore WS
%ignore _CPC


%import .inits (_NL, ESCAPED_STRING, _CPC,NUMBER, WS_INLINE, WS)
%import .inits (IDENTIFIER, IF,ELSE,WHILE,FOR)
%import .inits (parameters, string, _comp_op, primary)
%import .utilz (sqwrap,prwrap,brcwrap, separate, RPAR,RSQB,RBRACE,LPAR,LSQB,LBRACE)
COMMENT: "#" /[^\n]/*