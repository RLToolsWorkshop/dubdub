?start: (declaration | _NL) *


?declaration: func_dec 
            | var_dec
            | statement

// Declarations
// Deciding to put declarations all into one place to prevent confusion.

var_dec: "var" NAME ("=" expr)? ";" 
func_dec: "fun" function ";"



?statement: end_comma_stmt
    | for_statement
    | if_statement
    | while_statement
    // | call_stmt
    | block

?end_comma_stmt: ( simple_statement | print_statement | return_stmt )

// Notice for statements we add a ";" at the end. Because of the recursive na
?simple_statement:  expr ";"
?expr: assignment
return_stmt: "return" expr? ";"
print_statement: "print" expr ";"
if_statement: IF "(" expr ")" statement (ELSE statement)? 
while_statement : WHILE "(" expr ")" statement
for_statement : FOR "(" (var_dec | simple_statement  | ";") expr? ";" expr? ")" statement
call_stmt: call ";" ";"

?block: "{" declaration* "}"



// Assignment operators 

assignment: ( call "." )? NAME "=" assignment
    | logic_or


// Primative operators

// Terms and Factors

?complex_expr: product
    | complex_expr "+" product   -> add
    | complex_expr "-" product   -> sub

?product: unary ( ( "/" | "*" ) unary )*


?logic_or: (logic_and) ("or" logic_and)* 
?logic_and: logic_not ("and" logic_not)*
?logic_not: ("not"| "!") logic_not -> not 
         | comparison 
?comparison: complex_expr (_comp_op complex_expr)*

unary: unary | call
call: atom ("(" arguments? ")" | "." NAME)*
    
?atom: NUMBER           -> number
     | "-" atom         -> neg
     | NAME             -> var
     | "(" expr ")"
     | string
     | num_list

num_list: "[" _sep{NUMBER, ","} "]"
function       : NAME "(" parameters? ")" block 
parameters     : NAME ( "," NAME )* 
arguments: expr ("," expr )*
!_comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!=" 

string : ESCAPED_STRING

// Core functons
_sep{x, sep}: x (sep x)*



IF: "if" 
ELSE: "else"
WHILE: "while" 
FOR: "for" 

%ignore WS_INLINE
%ignore WS
%ignore _CPC

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.WS
%import common.NEWLINE -> _NL
%import common.CPP_COMMENT -> _CPC
%import common.ESCAPED_STRING

COMMENT: "#" /[^\n]/*