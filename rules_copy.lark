?start: (declaration | _NL) *


?declaration: var_dec
    | statement

// Declarations
// Deciding to put declarations all into one place to prevent confusion.

var_dec: "var" NAME ("=" expr)? ";" 




?statement: (end_comma_stmt| block) _NL*

?end_comma_stmt: ( simple_statement | print_statement | return_stmt )
?simple_statement:  expr ";"
?expr: assignment
return_stmt: "return" expr? ";"
print_statement: "print" expr ";"


?block: "{" declaration* "}"



// Assignment operators 

assignment: NAME "=" assignment
    | logic_or

?complex_expr: product
    | complex_expr "+" product   -> add
    | complex_expr "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div





?logic_or: logic_and ("or" logic_and)*
?logic_and: logic_not ("and" logic_not)*
?logic_not: ("not"| "!") logic_not -> not
         | comparison

?comparison: complex_expr (_comp_op complex_expr)*

!_comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="

num_list: "[" _sep{NUMBER, ","} "]"

?atom: NUMBER           -> number
     | "-" atom         -> neg
     | NAME             -> var
     | "(" complex_expr ")"
     | string
     | num_list

string : ESCAPED_STRING

IF: "if" 
ELSE: "else"


// Core functons
_sep{x, sep}: x (sep x)*



%ignore WS_INLINE
%ignore WS
%ignore _CPC

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.WS
%import common.NEWLINE -> _NL
%import common.CPP_COMMENT -> _CPC
%import common.ESCAPED_STRING

COMMENT: "#" /[^\n]/*