?start: (statement | _NL) *




?statement: ( simple_statement | print_statement ) [";"] _NL

?simple_statement:  (assign | expr)

assign: NAME "=" complex_expr 
?expr: complex_expr

print_statement: "print" expr 

 

?complex_expr: product
    | complex_expr "+" product   -> add
    | complex_expr "-" product   -> sub

?product: atom
    | product "*" atom  -> mul
    | product "/" atom  -> div

_separated{x, sep}: x (sep x)*

num_list: "[" _separated{NUMBER, ","} "]"

?atom: NUMBER           -> number
     | "-" atom         -> neg
     | NAME             -> var
     | "(" complex_expr ")"
     | num_list

?comparison: expr (_comp_op expr)*

!_comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="


%ignore WS_INLINE
%ignore _CPC

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS_INLINE
%import common.NEWLINE -> _NL
%import common.CPP_COMMENT -> _CPC
%import common.CPP_COMMENT -> _CPC


COMMENT: "#" /[^\n]/*